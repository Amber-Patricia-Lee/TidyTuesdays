labs(title = "number of artworks from lesser-represented countries",
subtitle = "removing UK, US, and Germany")
artwork_places %>%
group_by(countryBirth) %>%
mutate(count = n()) %>%
distinct(countryBirth, count) %>%
arrange(-count) %>%
head(10)
artist_places
artist_places %>%
filter(countryBirth == countryDeath)
artist_places %>%
filter(countryBirth == countryDeath) %>%
group_by(countryBirth) %>%
summarize(count = n())
artist_places %>%
filter(countryBirth == countryDeath) %>%
group_by(countryBirth) %>%
summarize(count = n())
artist_places %>%
filter(countryBirth != countryDeath) %>%
group_by(countryBirth) %>%
summarize(count = n())
artwork_places %>%
group_by(countryBirth) %>%
summarize(count = n()) %>%
filter(count > 50 & countryBirth != "United Kingdom" &
countryBirth != "United States" &
countryBirth != "Deutschland") %>%
ggplot() +
geom_bar(aes(x = countryBirth, y = count), stat = "identity") +
coord_flip() +
labs(title = "number of artworks from lesser-represented countries",
subtitle = "removing UK, US, and Germany")
artist_places %>%
filter(countryBirth == countryDeath) %>%
group_by(countryBirth) %>%
summarize(count = n()) %>%
arrange(-count)
artist_places %>%
filter(countryBirth != countryDeath) %>%
group_by(countryBirth) %>%
summarize(count = n()) %>%
arrange(-count)
artist_places %>%
filter(countryBirth == countryDeath) %>%
group_by(countryBirth) %>%
summarize(count = n()) %>%
arrange(-count) %>%
ggplot(aes(x = countryBirth, y = count)) +
geom_bar(stat = "identity")
artist_places %>%
filter(countryBirth == countryDeath) %>%
group_by(countryBirth) %>%
summarize(count = n()) %>%
arrange(-count) %>%
ggplot(aes(x = countryBirth, y = count)) +
geom_bar(stat = "identity") + coord_flip()
artist_places %>%
filter(countryBirth != countryDeath) %>%
group_by(countryBirth) %>%
summarize(count = n()) %>%
arrange(-count) %>%
ggplot(aes(x = countryBirth, y = count)) +
geom_bar(stat = "identity") + coord_flip()
artist_places %>%
filter(countryBirth == countryDeath) %>%
group_by(countryBirth) %>%
summarize(count = n()) %>%
arrange(-count) %>%
ggplot(aes(x = countryBirth, y = count)) +
geom_bar(stat = "identity") + coord_flip()
artist_places %>%
filter(countryBirth != countryDeath) %>%
group_by(countryBirth) %>%
summarize(count = n()) %>%
arrange(-count) %>%
ggplot(aes(x = countryBirth, y = count)) +
geom_bar(stat = "identity") + coord_flip()
artist_places %>%
mutate(samecountry = case_when(countryBirth == countryDeath ~ TRUE,
countryBirth != countryDeath ~ FALSE))
artist_places %>%
mutate(samecountry = case_when(countryBirth == countryDeath ~ TRUE,
countryBirth != countryDeath ~ FALSE)) %>%
group_by(countryBirth, samecountry) %>%
summarize(count = n())
artist_places %>%
mutate(samecountry = case_when(countryBirth == countryDeath ~ TRUE,
countryBirth != countryDeath ~ FALSE)) %>%
group_by(countryBirth, samecountry) %>%
summarize(count = n()) %>%
spread(key = samecountry, value = count)
artist_places %>%
mutate(samecountry = case_when(countryBirth == countryDeath ~ TRUE,
countryBirth != countryDeath ~ FALSE)) %>%
group_by(countryBirth, samecountry) %>%
summarize(count = n()) %>%
spread(key = samecountry, value = count, fill = 0)
artist_places %>%
mutate(samecountry = case_when(countryBirth == countryDeath ~ TRUE,
countryBirth != countryDeath ~ FALSE)) %>%
group_by(countryBirth, samecountry) %>%
summarize(count = n()) %>%
spread(key = samecountry, value = count, fill = 0) %>%
rename(differentcountry = `FALSE`,
samecountry = `TRUE`) %>%
filter(differentcountry > 0 & samecountry > 0) %>%
mutate(rate_same = samecountry/(differentcountry + samecountry + `<NA>`))
artist_places %>%
mutate(samecountry = case_when(countryBirth == countryDeath ~ TRUE,
countryBirth != countryDeath ~ FALSE)) %>%
group_by(countryBirth, samecountry) %>%
summarize(count = n()) %>%
spread(key = samecountry, value = count, fill = 0) %>%
rename(differentcountry = `FALSE`,
samecountry = `TRUE`) %>%
filter(differentcountry > 0 & samecountry > 0) %>%
mutate(rate_same = samecountry/
(differentcountry + samecountry + `<NA>`)) %>%
ggplot(aes(x = countryBirth, y = rate_same))
artist_places %>%
mutate(samecountry = case_when(countryBirth == countryDeath ~ TRUE,
countryBirth != countryDeath ~ FALSE)) %>%
group_by(countryBirth, samecountry) %>%
summarize(count = n()) %>%
spread(key = samecountry, value = count, fill = 0) %>%
rename(differentcountry = `FALSE`,
samecountry = `TRUE`) %>%
filter(differentcountry > 0 & samecountry > 0) %>%
mutate(rate_same = samecountry/
(differentcountry + samecountry + `<NA>`)) %>%
ggplot(aes(x = countryBirth, y = rate_same)) +
geom_point()
artist_places %>%
mutate(samecountry = case_when(countryBirth == countryDeath ~ TRUE,
countryBirth != countryDeath ~ FALSE)) %>%
group_by(countryBirth, samecountry) %>%
summarize(count = n()) %>%
spread(key = samecountry, value = count, fill = 0) %>%
rename(differentcountry = `FALSE`,
samecountry = `TRUE`) %>%
filter(differentcountry > 0 & samecountry > 0) %>%
mutate(rate_same = samecountry/
(differentcountry + samecountry + `<NA>`)) %>%
ggplot(aes(x = samecountry, y = rate_same, fill = `<NA>`)) +
geom_bar(stat = "identity")
artist_places %>%
mutate(samecountry = case_when(countryBirth == countryDeath ~ TRUE,
countryBirth != countryDeath ~ FALSE)) %>%
group_by(countryBirth, samecountry) %>%
summarize(count = n()) %>%
spread(key = samecountry, value = count, fill = 0) %>%
rename(differentcountry = `FALSE`,
samecountry = `TRUE`) %>%
filter(differentcountry > 0 & samecountry > 0) %>%
mutate(rate_same = samecountry/
(differentcountry + samecountry + `<NA>`)) %>%
ggplot(aes(x = countryBirth, y = rate_same, fill = `<NA>`)) +
geom_bar(stat = "identity")
artist_places %>%
mutate(samecountry = case_when(countryBirth == countryDeath ~ TRUE,
countryBirth != countryDeath ~ FALSE)) %>%
group_by(countryBirth, samecountry) %>%
summarize(count = n()) %>%
spread(key = samecountry, value = count, fill = 0) %>%
rename(differentcountry = `FALSE`,
samecountry = `TRUE`) %>%
filter(differentcountry > 0 & samecountry > 0) %>%
mutate(total = differentcountry + samecountry + `<NA>`,
rate_same = samecountry / total,
rate_NA = `<NA>` / total) %>%
ggplot(aes(x = rate_same, y = rate_NA, fill = `<NA>`)) +
geom_point(stat = "identity")
artist_places %>%
mutate(samecountry = case_when(countryBirth == countryDeath ~ TRUE,
countryBirth != countryDeath ~ FALSE)) %>%
group_by(countryBirth, samecountry) %>%
summarize(count = n()) %>%
spread(key = samecountry, value = count, fill = 0) %>%
rename(differentcountry = `FALSE`,
samecountry = `TRUE`) %>%
filter(differentcountry > 0 & samecountry > 0) %>%
mutate(total = differentcountry + samecountry + `<NA>`,
rate_same = samecountry / total,
rate_NA = `<NA>` / total) %>%
ggplot(aes(x = rate_same, y = rate_NA, color = `<NA>`)) +
geom_point(stat = "identity")
artist_places %>%
mutate(samecountry = case_when(countryBirth == countryDeath ~ TRUE,
countryBirth != countryDeath ~ FALSE)) %>%
group_by(countryBirth, samecountry) %>%
summarize(count = n()) %>%
spread(key = samecountry, value = count, fill = 0) %>%
rename(differentcountry = `FALSE`,
samecountry = `TRUE`) %>%
filter(differentcountry > 0 & samecountry > 0) %>%
mutate(total = differentcountry + samecountry + `<NA>`,
rate_same = samecountry / total,
rate_NA = `<NA>` / total) %>%
ggplot(aes(x = countryBirth, y = rate_same, fill = rate_NA)) +
geom_bar(stat = "identity")
artist_places %>%
mutate(samecountry = case_when(countryBirth == countryDeath ~ TRUE,
countryBirth != countryDeath ~ FALSE)) %>%
group_by(countryBirth, samecountry) %>%
summarize(count = n()) %>%
spread(key = samecountry, value = count, fill = 0) %>%
rename(differentcountry = `FALSE`,
samecountry = `TRUE`) %>%
filter(differentcountry > 0 & samecountry > 0) %>%
mutate(total = differentcountry + samecountry + `<NA>`,
rate_same = samecountry / total,
rate_NA = `<NA>` / total) %>%
ggplot(aes(x = countryBirth, y = rate_same, fill = rate_NA)) +
geom_bar(stat = "identity") +
coord_flip()
artist_places %>%
mutate(samecountry = case_when(countryBirth == countryDeath ~ TRUE,
countryBirth != countryDeath ~ FALSE)) %>%
group_by(countryBirth, samecountry) %>%
summarize(count = n())
artist_places %>%
mutate(samecountry = case_when(countryBirth == countryDeath ~ TRUE,
countryBirth != countryDeath ~ FALSE)) %>%
group_by(countryBirth, samecountry) %>%
summarize(count = n()) %>%
filter(count > 1)
artist_places %>%
mutate(samecountry = case_when(countryBirth == countryDeath ~ TRUE,
countryBirth != countryDeath ~ FALSE)) %>%
group_by(countryBirth, samecountry) %>%
summarize(count = n()) %>%
filter(count > 1) %>%
ggplot(aes(x = countryBirth, y = count, fill = samecountry)) +
geom_bar(position = "fill", stat = "identity")
artist_places %>%
mutate(samecountry = case_when(countryBirth == countryDeath ~ TRUE,
countryBirth != countryDeath ~ FALSE)) %>%
group_by(countryBirth, samecountry) %>%
summarize(count = n()) %>%
filter(count > 1) %>%
ggplot(aes(x = countryBirth, y = count, fill = samecountry)) +
geom_bar(position = "fill", stat = "identity") +
coord_flip()
artist_places %>%
mutate(samecountry = case_when(countryBirth == countryDeath ~ TRUE,
countryBirth != countryDeath ~ FALSE)) %>%
group_by(countryBirth, samecountry) %>%
summarize(count = n()) %>%
filter(count > 3) %>%
ggplot(aes(x = countryBirth, y = count, fill = samecountry)) +
geom_bar(position = "fill", stat = "identity") +
coord_flip()
artist_places %>%
mutate(samecountry = case_when(countryBirth == countryDeath ~ TRUE,
countryBirth != countryDeath ~ FALSE)) %>%
group_by(countryBirth, samecountry) %>%
summarize(count = n()) %>%
filter(count > 5) %>%
ggplot(aes(x = countryBirth, y = count, fill = samecountry)) +
geom_bar(position = "fill", stat = "identity") +
coord_flip()
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# need tmaptools and stars package
install.packages("tmaptools", "stars", "tmap")
remove.packages("tmaptools")
remove.packages("tmap")
# need tmaptools and stars package
install.packages("tmaptools", "stars", "tmap")
# need tmaptools and stars package
install.packages("tmaptools", "stars", "tmap")
# need tmaptools and stars package
install.packages(c("tmaptools", "stars", "tmap"))
# need tmaptools and stars package
# install.packages(c("tmaptools", "stars", "tmap"))
library(tmap)
library(sf)
tm_shape(internet_sf$geometry) + tm_polygons
counties <- rKenyaCensus::KenyaCounties_SHP
internet <- rKenyaCensus::V4_T2.33 %>%
filter(AdminArea == "County") %>%
select(-SubCounty, -AdminArea)
library(tidytuesdayR)
library(tidyverse)
# install.packages("remotes")
# remotes::install_github("Shelmith-Kariuki/rKenyaCensus")
library(rKenyaCensus) # this loads data
counties <- rKenyaCensus::KenyaCounties_SHP
internet <- rKenyaCensus::V4_T2.33 %>%
filter(AdminArea == "County") %>%
select(-SubCounty, -AdminArea)
counties_sf <- st_as_sf(counties)
internet_sf <- merge(counties_sf, internet, by = "County")
tm_shape(internet_sf$geometry) + tm_polygons
tm_shape(internet_sf$geometry) + tm_polygons()
tm_shape(internet_sf$geometry) +
tm_polygons(col = UoI_Total)
tm_shape(internet_sf$geometry) +
tm_polygons(col = "UoI_Total")
tm_shape(internet_sf) +
tm_polygons(col = "UoI_Total")
tm_shape(internet_sf) +
tm_polygons(col = "UoI_Total_Perc")
tm_shape(internet_sf) +
tm_polygons(col = "UoI_Total_Perc")
rKenyaCensus
tuesdata
tuesdata <- tidytuesdayR::tt_load('2021-01-19')
crops <- tuesdata$crops
crops <- crops %>%
filter(SubCounty != "KENYA") %>%
rename(County = SubCounty) %>%
mutate(countNA = rowSums(is.na(.)))
crops
crops <- crops %>%
filter(SubCounty != "KENYA") %>%
rename(County = SubCounty) %>%
mutate(countNA = rowSums(is.na(.))) %>%
filter(countnA < 9)
crops <- crops %>%
filter(SubCounty != "KENYA") %>%
rename(County = SubCounty) %>%
mutate(countNA = rowSums(is.na(.))) %>%
filter(countNA < 9)
crops <- tuesdata$crops
crops %>%
filter(SubCounty != "KENYA") %>%
rename(County = SubCounty) %>%
mutate(countNA = rowSums(is.na(.))) %>%
filter(countNA < 9)
?crops
data(package = "rKenyaCensus")
tuesdata
?V4_T2.25
tuesdata
crops <- crops %>%
filter(SubCounty != "KENYA") %>%
rename(County = SubCounty) %>%
mutate(countNA = rowSums(is.na(.))) %>%
select(-Farming)
tuesdata <- tidytuesdayR::tt_load('2021-01-19')
crops <- tuesdata$crops
crops <- crops %>%
filter(SubCounty != "KENYA") %>%
rename(County = SubCounty) %>%
mutate(countNA = rowSums(is.na(.))) %>%
select(-Farming) %>%
filter(countNA < 9)
crops
?pivot_longer
?pivot_longer
crops %>%
select(-countNA) %>%
pivot_longer(cols = Tea:Khat, names_to = "cropType")
crops
crops %>%
rename(Khat = `Khat (Miraa)`) %>%
select(-countNA) %>%
pivot_longer(cols = Tea:Khat, names_to = "cropType")
crops %>%
rename(Khat = `Khat (Miraa)`) %>%
select(-countNA) %>%
pivot_longer(cols = Tea:Khat,
names_to = "cropType",
values_to = "population") %>%
group_by(County)
crops %>%
rename(Khat = `Khat (Miraa)`) %>%
select(-countNA) %>%
pivot_longer(cols = Tea:Khat,
names_to = "cropType",
values_to = "population") %>%
group_by(County) %>%
summarize(max = max(population))
crops %>%
rename(Khat = `Khat (Miraa)`) %>%
select(-countNA) %>%
pivot_longer(cols = Tea:Khat,
names_to = "cropType",
values_to = "population") %>%
group_by(County) %>%
summarize(max = max(population, na.rm = TRUE))
crops %>%
rename(Khat = `Khat (Miraa)`) %>%
select(-countNA) %>%
pivot_longer(cols = Tea:Khat,
names_to = "cropType",
values_to = "population") %>%
group_by(County) %>%
arrange(population)
crops %>%
rename(Khat = `Khat (Miraa)`) %>%
select(-countNA) %>%
pivot_longer(cols = Tea:Khat,
names_to = "cropType",
values_to = "population") %>%
group_by(County) %>%
arrange(-population)
crops %>%
rename(Khat = `Khat (Miraa)`) %>%
select(-countNA) %>%
pivot_longer(cols = Tea:Khat,
names_to = "cropType",
values_to = "population") %>%
group_by(County) %>%
arrange(-population)
crops %>%
rename(Khat = `Khat (Miraa)`) %>%
select(-countNA) %>%
pivot_longer(cols = Tea:Khat,
names_to = "cropType",
values_to = "population") %>%
group_by(County) %>%
arrange(County, -population)
crops %>%
rename(Khat = `Khat (Miraa)`) %>%
select(-countNA) %>%
pivot_longer(cols = Tea:Khat,
names_to = "cropType",
values_to = "population") %>%
group_by(County) %>%
arrange(County, -population) %>%
top_n(n-1)
crops %>%
rename(Khat = `Khat (Miraa)`) %>%
select(-countNA) %>%
pivot_longer(cols = Tea:Khat,
names_to = "cropType",
values_to = "population") %>%
arrange(County, -population) %>%
group_by(County) %>%
top_n(n-1)
crops %>%
rename(Khat = `Khat (Miraa)`) %>%
select(-countNA) %>%
pivot_longer(cols = Tea:Khat,
names_to = "cropType",
values_to = "population") %>%
arrange(County, -population) %>%
group_by(County) %>%
top_n(1)
topcrops_county <- crops %>%
rename(Khat = `Khat (Miraa)`) %>%
select(-countNA) %>%
pivot_longer(cols = Tea:Khat,
names_to = "cropType",
values_to = "population") %>%
arrange(County, -population) %>%
group_by(County) %>%
top_n(1)
topcrops_county
topcrops <- crops %>%
rename(Khat = `Khat (Miraa)`) %>%
select(-countNA) %>%
pivot_longer(cols = Tea:Khat,
names_to = "cropType",
values_to = "population") %>%
arrange(County, -population) %>%
group_by(County) %>%
top_n(1)
topcrops_sf <- merge(counties_sf, topcrops)
topcrops_sf <- merge(counties_sf, topcrops, by = "County")
topcrops
tm_shape(topcrops_sf) +
tm_polygons(col = "population")
1+1
tm_shape(topcrops_sf) +
tm_polygons(col = "cropType")
tm_shape(topcrops_sf) +
tm_polygons(col = "cropType") +
tm_layout(title = "Most grown crop per county in Kenya",
title.size = 1,
title.position = c("left", "top"),
legend.title.size = 0.8,
legend.title.fontface = "bold",
inner.margins = c(0.1, 0.1, 0.1, 0.1))
topcrops
topcrops %>%
mutate(alpha = population / max(population))
topcrops %>%
ungroup() %>%
mutate(alpha = population / max(population))
topcrops <- crops %>%
rename(Khat = `Khat (Miraa)`) %>%
select(-countNA) %>%
pivot_longer(cols = Tea:Khat,
names_to = "cropType",
values_to = "population") %>%
arrange(County, -population) %>%
group_by(County) %>%
top_n(1) %>%
ungroup() %>%
mutate(alpha = population / max(population))
tm_shape(topcrops_sf) +
tm_polygons(col = "cropType", alpha = "alpha") +
tm_layout(title = "Most grown crop per county in Kenya",
title.size = 1,
title.position = c("left", "top"),
legend.title.size = 0.8,
legend.title.fontface = "bold",
inner.margins = c(0.1, 0.1, 0.1, 0.1))
topcrops_sf <- merge(counties_sf, topcrops, by = "County")
tm_shape(topcrops_sf) +
tm_polygons(col = "cropType", alpha = "alpha") +
tm_layout(title = "Most grown crop per county in Kenya",
title.size = 1,
title.position = c("left", "top"),
legend.title.size = 0.8,
legend.title.fontface = "bold",
inner.margins = c(0.1, 0.1, 0.1, 0.1))
topcrops
